import fractions #for gcd function (or easily implementable to avoid import)
import random #for random elements drawing in RecoverPrimeFactors

def failFunction():
	print("Prime factors not found")

def outputPrimes(a, n):
	p = fractions.gcd(a, n)
	q = int(n / p)
	if p > q:
		p, q = q, p
	print("Found factors p and q")
	print("p = {0}".format(str(p)))
	print("q = {0}".format(str(q)))
	return p,q


def RecoverPrimeFactors(n, e, d):
	"""The following algorithm recovers the prime factor
		s of a modulus, given the public and private
		exponents.
		Function call: RecoverPrimeFactors(n, e, d)
		Input: 	n: modulus
				e: public exponent
				d: private exponent
		Output: (p, q): prime factors of modulus"""

	k = d * e - 1
	if k % 2 == 1:
		failFunction()
		return 0, 0
	else:
		t = 0
		r = k
		while(r % 2 == 0):
			r = int(r / 2)
			t += 1
		for i in range(1, 101):
			g = random.randint(0, n) # random g in [0, n-1]
			y = pow(g, r, n)
			if y == 1 or y == n - 1:
				continue
			else:
				for j in range(1, t): # j \in [1, t-1]
					x = pow(y, 2, n)
					if x == 1:
						p, q = outputPrimes(y - 1, n)
						return p, q
					elif x == n - 1:
						continue
					y = x
					x = pow(y, 2, n)
					if  x == 1:
						p, q = outputPrimes(y - 1, n)
						return p, q

n=22702548988585639637851431705875336575429862255188645528887111724338807108889571748597184000150880723937377646354782096179701969674522159233980700069669264159299994181571326564481560158416010897880474527515788236201435179106261470748150803007008802283045789226818457497417965570752028940845456738725432663418600719742841282343631476474796788118645986891324395254581787259492873305556198898579932343345978999277950429982957945557756158193790593989493517773943223087713762372788006918693003764533210155652090146152802657740521088243457672570665828910803472880085783454809883948635370279397426446590104641086404651590313
e=65537
d=8583300408001205104699372488947908657186034254834128185830368407245784252316490055796588570666013436344665506833983715750502088966466424485398687555522300797093782990234132316320919444058042297140277977978641086967654315392754424557085014524736623631983590421626069851702432990708970094698700384090494995715071183650922088075193246723137605407860036257002232313278864050794322031813665828387902387594617981849621559689493473674817599252679718986483691803809453381924322783193113102258652902805929559824002574465193743370946566891428836357847005942547746759368450889782252295496543534609564235482473199601293945915465
RecoverPrimeFactors(n, e, d)
